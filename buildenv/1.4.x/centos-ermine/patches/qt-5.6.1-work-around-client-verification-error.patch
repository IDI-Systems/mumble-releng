--- ./qtbase/src/network/ssl/qsslsocket_openssl.cpp
+++ ./qtbase/src/network/ssl/qsslsocket_openssl.cpp
@@ -271,27 +271,32 @@ int q_X509Callback(int ok, X509_STORE_CT
 {
     if (!ok) {
         // Store the error and at which depth the error was detected.
-        _q_sslErrorList()->errors << qMakePair<int, int>(q_X509_STORE_CTX_get_error(ctx), q_X509_STORE_CTX_get_error_depth(ctx));
-#ifdef QSSLSOCKET_DEBUG
-        qCDebug(lcSsl) << "verification error: dumping bad certificate";
-        qCDebug(lcSsl) << QSslCertificatePrivate::QSslCertificate_from_X509(q_X509_STORE_CTX_get_current_cert(ctx)).toPem();
-        qCDebug(lcSsl) << "dumping chain";
-        foreach (QSslCertificate cert, QSslSocketBackendPrivate::STACKOFX509_to_QSslCertificates(q_X509_STORE_CTX_get_chain(ctx))) {
-            qCDebug(lcSsl) << "Issuer:" << "O=" << cert.issuerInfo(QSslCertificate::Organization)
-                << "CN=" << cert.issuerInfo(QSslCertificate::CommonName)
-                << "L=" << cert.issuerInfo(QSslCertificate::LocalityName)
-                << "OU=" << cert.issuerInfo(QSslCertificate::OrganizationalUnitName)
-                << "C=" << cert.issuerInfo(QSslCertificate::CountryName)
-                << "ST=" << cert.issuerInfo(QSslCertificate::StateOrProvinceName);
-            qCDebug(lcSsl) << "Subject:" << "O=" << cert.subjectInfo(QSslCertificate::Organization)
-                << "CN=" << cert.subjectInfo(QSslCertificate::CommonName)
-                << "L=" << cert.subjectInfo(QSslCertificate::LocalityName)
-                << "OU=" << cert.subjectInfo(QSslCertificate::OrganizationalUnitName)
-                << "C=" << cert.subjectInfo(QSslCertificate::CountryName)
-                << "ST=" << cert.subjectInfo(QSslCertificate::StateOrProvinceName);
-            qCDebug(lcSsl) << "Valid:" << cert.effectiveDate() << '-' << cert.expiryDate();
+        int error = q_X509_STORE_CTX_get_error(ctx);
+        int error_depth = q_X509_STORE_CTX_get_error_depth(ctx);
+        X509_VERIFY_PARAM *param = q_X509_STORE_CTX_get0_param(ctx);
+        if ((error_depth != 0) || (error != X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT) || (param->purpose != 0) || (param->trust != 0)) {
+            _q_sslErrorList()->errors << qMakePair<int, int>(q_X509_STORE_CTX_get_error(ctx), q_X509_STORE_CTX_get_error_depth(ctx));
+    #ifdef QSSLSOCKET_DEBUG
+            qCDebug(lcSsl) << "verification error: dumping bad certificate";
+            qCDebug(lcSsl) << QSslCertificatePrivate::QSslCertificate_from_X509(q_X509_STORE_CTX_get_current_cert(ctx)).toPem();
+            qCDebug(lcSsl) << "dumping chain";
+            foreach (QSslCertificate cert, QSslSocketBackendPrivate::STACKOFX509_to_QSslCertificates(q_X509_STORE_CTX_get_chain(ctx))) {
+                qCDebug(lcSsl) << "Issuer:" << "O=" << cert.issuerInfo(QSslCertificate::Organization)
+                    << "CN=" << cert.issuerInfo(QSslCertificate::CommonName)
+                    << "L=" << cert.issuerInfo(QSslCertificate::LocalityName)
+                    << "OU=" << cert.issuerInfo(QSslCertificate::OrganizationalUnitName)
+                    << "C=" << cert.issuerInfo(QSslCertificate::CountryName)
+                    << "ST=" << cert.issuerInfo(QSslCertificate::StateOrProvinceName);
+                qCDebug(lcSsl) << "Subject:" << "O=" << cert.subjectInfo(QSslCertificate::Organization)
+                    << "CN=" << cert.subjectInfo(QSslCertificate::CommonName)
+                    << "L=" << cert.subjectInfo(QSslCertificate::LocalityName)
+                    << "OU=" << cert.subjectInfo(QSslCertificate::OrganizationalUnitName)
+                    << "C=" << cert.subjectInfo(QSslCertificate::CountryName)
+                    << "ST=" << cert.subjectInfo(QSslCertificate::StateOrProvinceName);
+                qCDebug(lcSsl) << "Valid:" << cert.effectiveDate() << '-' << cert.expiryDate();
+            }
+    #endif
         }
-#endif
     }
     // Always return OK to allow verification to continue. We're handle the
     // errors gracefully after collecting all errors, after verification has
--- ./qtbase/src/network/ssl/qsslsocket_openssl_symbols.cpp
+++ ./qtbase/src/network/ssl/qsslsocket_openssl_symbols.cpp
@@ -379,6 +379,7 @@ DEFINEFUNC(int, X509_STORE_CTX_get_error
 DEFINEFUNC(int, X509_STORE_CTX_get_error_depth, X509_STORE_CTX *a, a, return -1, return)
 DEFINEFUNC(X509 *, X509_STORE_CTX_get_current_cert, X509_STORE_CTX *a, a, return 0, return)
 DEFINEFUNC(STACK_OF(X509) *, X509_STORE_CTX_get_chain, X509_STORE_CTX *a, a, return 0, return)
+DEFINEFUNC(X509_VERIFY_PARAM *, X509_STORE_CTX_get0_param, X509_STORE_CTX *a, a, return 0, return)
 DEFINEFUNC(X509_STORE_CTX *, X509_STORE_CTX_new, DUMMYARG, DUMMYARG, return 0, return)
 #ifdef SSLEAY_MACROS
 DEFINEFUNC2(int, i2d_DSAPrivateKey, const DSA *a, a, unsigned char **b, b, return -1, return)
@@ -925,6 +926,7 @@ bool q_resolveOpenSslSymbols()
     RESOLVEFUNC(X509_STORE_CTX_get_error_depth)
     RESOLVEFUNC(X509_STORE_CTX_get_current_cert)
     RESOLVEFUNC(X509_STORE_CTX_get_chain)
+    RESOLVEFUNC(X509_STORE_CTX_get0_param)
     RESOLVEFUNC(X509_cmp)
 #ifndef SSLEAY_MACROS
     RESOLVEFUNC(X509_dup)
--- ./qtbase/src/network/ssl/qsslsocket_openssl_symbols_p.h
+++ ./qtbase/src/network/ssl/qsslsocket_openssl_symbols_p.h
@@ -461,6 +461,7 @@ int q_X509_STORE_CTX_get_error(X509_STOR
 int q_X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx);
 X509 *q_X509_STORE_CTX_get_current_cert(X509_STORE_CTX *ctx);
 STACK_OF(X509) *q_X509_STORE_CTX_get_chain(X509_STORE_CTX *ctx);
+X509_VERIFY_PARAM *q_X509_STORE_CTX_get0_param(X509_STORE_CTX *ctx);
 
 // Diffie-Hellman support
 DH *q_DH_new();
